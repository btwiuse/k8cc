// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mbrt/k8cc/pkg/controller (interfaces: Controller)

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DoMaintenance mocks base method
func (m *MockController) DoMaintenance(arg0 context.Context, arg1 time.Time) {
	m.ctrl.Call(m, "DoMaintenance", arg0, arg1)
}

// DoMaintenance indicates an expected call of DoMaintenance
func (mr *MockControllerMockRecorder) DoMaintenance(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoMaintenance", reflect.TypeOf((*MockController)(nil).DoMaintenance), arg0, arg1)
}

// LeaseUser mocks base method
func (m *MockController) LeaseUser(arg0, arg1 string, arg2 time.Time) time.Time {
	ret := m.ctrl.Call(m, "LeaseUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LeaseUser indicates an expected call of LeaseUser
func (mr *MockControllerMockRecorder) LeaseUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaseUser", reflect.TypeOf((*MockController)(nil).LeaseUser), arg0, arg1, arg2)
}
