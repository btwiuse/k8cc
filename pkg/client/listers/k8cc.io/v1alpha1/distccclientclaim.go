/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/btwiuse/k8cc/pkg/apis/k8cc.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DistccClientClaimLister helps list DistccClientClaims.
type DistccClientClaimLister interface {
	// List lists all DistccClientClaims in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DistccClientClaim, err error)
	// DistccClientClaims returns an object that can list and get DistccClientClaims.
	DistccClientClaims(namespace string) DistccClientClaimNamespaceLister
	DistccClientClaimListerExpansion
}

// distccClientClaimLister implements the DistccClientClaimLister interface.
type distccClientClaimLister struct {
	indexer cache.Indexer
}

// NewDistccClientClaimLister returns a new DistccClientClaimLister.
func NewDistccClientClaimLister(indexer cache.Indexer) DistccClientClaimLister {
	return &distccClientClaimLister{indexer: indexer}
}

// List lists all DistccClientClaims in the indexer.
func (s *distccClientClaimLister) List(selector labels.Selector) (ret []*v1alpha1.DistccClientClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DistccClientClaim))
	})
	return ret, err
}

// DistccClientClaims returns an object that can list and get DistccClientClaims.
func (s *distccClientClaimLister) DistccClientClaims(namespace string) DistccClientClaimNamespaceLister {
	return distccClientClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DistccClientClaimNamespaceLister helps list and get DistccClientClaims.
type DistccClientClaimNamespaceLister interface {
	// List lists all DistccClientClaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DistccClientClaim, err error)
	// Get retrieves the DistccClientClaim from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DistccClientClaim, error)
	DistccClientClaimNamespaceListerExpansion
}

// distccClientClaimNamespaceLister implements the DistccClientClaimNamespaceLister
// interface.
type distccClientClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DistccClientClaims in the indexer for a given namespace.
func (s distccClientClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DistccClientClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DistccClientClaim))
	})
	return ret, err
}

// Get retrieves the DistccClientClaim from the indexer for a given namespace and name.
func (s distccClientClaimNamespaceLister) Get(name string) (*v1alpha1.DistccClientClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("distccclientclaim"), name)
	}
	return obj.(*v1alpha1.DistccClientClaim), nil
}
