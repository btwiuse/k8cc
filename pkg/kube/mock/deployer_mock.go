// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mbrt/k8cc/pkg/kube (interfaces: Deployer)

// Package mock_kube is a generated GoMock package.
package mock_kube

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	kube "github.com/mbrt/k8cc/pkg/kube"
	reflect "reflect"
)

// MockDeployer is a mock of Deployer interface
type MockDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerMockRecorder
}

// MockDeployerMockRecorder is the mock recorder for MockDeployer
type MockDeployerMockRecorder struct {
	mock *MockDeployer
}

// NewMockDeployer creates a new mock instance
func NewMockDeployer(ctrl *gomock.Controller) *MockDeployer {
	mock := &MockDeployer{ctrl: ctrl}
	mock.recorder = &MockDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployer) EXPECT() *MockDeployerMockRecorder {
	return m.recorder
}

// DeploymentName mocks base method
func (m *MockDeployer) DeploymentName(arg0 string) string {
	ret := m.ctrl.Call(m, "DeploymentName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DeploymentName indicates an expected call of DeploymentName
func (mr *MockDeployerMockRecorder) DeploymentName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentName", reflect.TypeOf((*MockDeployer)(nil).DeploymentName), arg0)
}

// DeploymentsState mocks base method
func (m *MockDeployer) DeploymentsState(arg0 context.Context) ([]kube.DeploymentState, error) {
	ret := m.ctrl.Call(m, "DeploymentsState", arg0)
	ret0, _ := ret[0].([]kube.DeploymentState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentsState indicates an expected call of DeploymentsState
func (mr *MockDeployerMockRecorder) DeploymentsState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentsState", reflect.TypeOf((*MockDeployer)(nil).DeploymentsState), arg0)
}

// ScaleSet mocks base method
func (m *MockDeployer) ScaleSet(arg0 context.Context, arg1 string, arg2 int) error {
	ret := m.ctrl.Call(m, "ScaleSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScaleSet indicates an expected call of ScaleSet
func (mr *MockDeployerMockRecorder) ScaleSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleSet", reflect.TypeOf((*MockDeployer)(nil).ScaleSet), arg0, arg1, arg2)
}
